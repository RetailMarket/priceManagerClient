// Code generated by protoc-gen-go.
// source: priceManager.proto
// DO NOT EDIT!

/*
Package priceManagerClient is a generated protocol buffer package.

It is generated from these files:
	priceManager.proto

It has these top-level messages:
	Entry
	FetchRecordsRequest
	FetchRecordsResponse
	NotifyRequest
	NotifyResponse
	UpdateEntryRequest
	UpdateEntryResponse
*/
package priceManagerClient

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Entry struct {
	ProductId   int32  `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	Version     string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	ProductName string `protobuf:"bytes,3,opt,name=product_name,json=productName" json:"product_name,omitempty"`
	Cost        int32  `protobuf:"varint,4,opt,name=cost" json:"cost,omitempty"`
	Status      string `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	IsLatest    bool   `protobuf:"varint,6,opt,name=is_latest,json=isLatest" json:"is_latest,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entry) GetProductId() int32 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *Entry) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Entry) GetProductName() string {
	if m != nil {
		return m.ProductName
	}
	return ""
}

func (m *Entry) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *Entry) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Entry) GetIsLatest() bool {
	if m != nil {
		return m.IsLatest
	}
	return false
}

type FetchRecordsRequest struct {
}

func (m *FetchRecordsRequest) Reset()                    { *m = FetchRecordsRequest{} }
func (m *FetchRecordsRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRecordsRequest) ProtoMessage()               {}
func (*FetchRecordsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type FetchRecordsResponse struct {
	Entries []*Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *FetchRecordsResponse) Reset()                    { *m = FetchRecordsResponse{} }
func (m *FetchRecordsResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchRecordsResponse) ProtoMessage()               {}
func (*FetchRecordsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchRecordsResponse) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type NotifyRequest struct {
	Entries []*Entry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (m *NotifyRequest) Reset()                    { *m = NotifyRequest{} }
func (m *NotifyRequest) String() string            { return proto.CompactTextString(m) }
func (*NotifyRequest) ProtoMessage()               {}
func (*NotifyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NotifyRequest) GetEntries() []*Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type NotifyResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *NotifyResponse) Reset()                    { *m = NotifyResponse{} }
func (m *NotifyResponse) String() string            { return proto.CompactTextString(m) }
func (*NotifyResponse) ProtoMessage()               {}
func (*NotifyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NotifyResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type UpdateEntryRequest struct {
	ProductId int32 `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	Cost      int32 `protobuf:"varint,2,opt,name=cost" json:"cost,omitempty"`
}

func (m *UpdateEntryRequest) Reset()                    { *m = UpdateEntryRequest{} }
func (m *UpdateEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEntryRequest) ProtoMessage()               {}
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateEntryRequest) GetProductId() int32 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *UpdateEntryRequest) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type UpdateEntryResponse struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *UpdateEntryResponse) Reset()                    { *m = UpdateEntryResponse{} }
func (m *UpdateEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateEntryResponse) ProtoMessage()               {}
func (*UpdateEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateEntryResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Entry)(nil), "priceManagerClient.Entry")
	proto.RegisterType((*FetchRecordsRequest)(nil), "priceManagerClient.FetchRecordsRequest")
	proto.RegisterType((*FetchRecordsResponse)(nil), "priceManagerClient.FetchRecordsResponse")
	proto.RegisterType((*NotifyRequest)(nil), "priceManagerClient.NotifyRequest")
	proto.RegisterType((*NotifyResponse)(nil), "priceManagerClient.NotifyResponse")
	proto.RegisterType((*UpdateEntryRequest)(nil), "priceManagerClient.UpdateEntryRequest")
	proto.RegisterType((*UpdateEntryResponse)(nil), "priceManagerClient.UpdateEntryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PriceManager service

type PriceManagerClient interface {
	PriceUpdateRecords(ctx context.Context, in *FetchRecordsRequest, opts ...grpc.CallOption) (*FetchRecordsResponse, error)
	AllLatestRecords(ctx context.Context, in *FetchRecordsRequest, opts ...grpc.CallOption) (*FetchRecordsResponse, error)
	NotifySuccessfullyPicked(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
	NotifySuccessfullyProcessed(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
	InsertPriceUpdateRequest(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*UpdateEntryResponse, error)
}

type priceManagerClient struct {
	cc *grpc.ClientConn
}

func NewPriceManagerClient(cc *grpc.ClientConn) PriceManagerClient {
	return &priceManagerClient{cc}
}

func (c *priceManagerClient) PriceUpdateRecords(ctx context.Context, in *FetchRecordsRequest, opts ...grpc.CallOption) (*FetchRecordsResponse, error) {
	out := new(FetchRecordsResponse)
	err := grpc.Invoke(ctx, "/priceManagerClient.PriceManager/PriceUpdateRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceManagerClient) AllLatestRecords(ctx context.Context, in *FetchRecordsRequest, opts ...grpc.CallOption) (*FetchRecordsResponse, error) {
	out := new(FetchRecordsResponse)
	err := grpc.Invoke(ctx, "/priceManagerClient.PriceManager/AllLatestRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceManagerClient) NotifySuccessfullyPicked(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := grpc.Invoke(ctx, "/priceManagerClient.PriceManager/NotifySuccessfullyPicked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceManagerClient) NotifySuccessfullyProcessed(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	out := new(NotifyResponse)
	err := grpc.Invoke(ctx, "/priceManagerClient.PriceManager/NotifySuccessfullyProcessed", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *priceManagerClient) InsertPriceUpdateRequest(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*UpdateEntryResponse, error) {
	out := new(UpdateEntryResponse)
	err := grpc.Invoke(ctx, "/priceManagerClient.PriceManager/InsertPriceUpdateRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PriceManager service

type PriceManagerServer interface {
	PriceUpdateRecords(context.Context, *FetchRecordsRequest) (*FetchRecordsResponse, error)
	AllLatestRecords(context.Context, *FetchRecordsRequest) (*FetchRecordsResponse, error)
	NotifySuccessfullyPicked(context.Context, *NotifyRequest) (*NotifyResponse, error)
	NotifySuccessfullyProcessed(context.Context, *NotifyRequest) (*NotifyResponse, error)
	InsertPriceUpdateRequest(context.Context, *UpdateEntryRequest) (*UpdateEntryResponse, error)
}

func RegisterPriceManagerServer(s *grpc.Server, srv PriceManagerServer) {
	s.RegisterService(&_PriceManager_serviceDesc, srv)
}

func _PriceManager_PriceUpdateRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceManagerServer).PriceUpdateRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/priceManagerClient.PriceManager/PriceUpdateRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceManagerServer).PriceUpdateRecords(ctx, req.(*FetchRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceManager_AllLatestRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceManagerServer).AllLatestRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/priceManagerClient.PriceManager/AllLatestRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceManagerServer).AllLatestRecords(ctx, req.(*FetchRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceManager_NotifySuccessfullyPicked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceManagerServer).NotifySuccessfullyPicked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/priceManagerClient.PriceManager/NotifySuccessfullyPicked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceManagerServer).NotifySuccessfullyPicked(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceManager_NotifySuccessfullyProcessed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceManagerServer).NotifySuccessfullyProcessed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/priceManagerClient.PriceManager/NotifySuccessfullyProcessed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceManagerServer).NotifySuccessfullyProcessed(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PriceManager_InsertPriceUpdateRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceManagerServer).InsertPriceUpdateRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/priceManagerClient.PriceManager/InsertPriceUpdateRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceManagerServer).InsertPriceUpdateRequest(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PriceManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "priceManagerClient.PriceManager",
	HandlerType: (*PriceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PriceUpdateRecords",
			Handler:    _PriceManager_PriceUpdateRecords_Handler,
		},
		{
			MethodName: "AllLatestRecords",
			Handler:    _PriceManager_AllLatestRecords_Handler,
		},
		{
			MethodName: "NotifySuccessfullyPicked",
			Handler:    _PriceManager_NotifySuccessfullyPicked_Handler,
		},
		{
			MethodName: "NotifySuccessfullyProcessed",
			Handler:    _PriceManager_NotifySuccessfullyProcessed_Handler,
		},
		{
			MethodName: "InsertPriceUpdateRequest",
			Handler:    _PriceManager_InsertPriceUpdateRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "priceManager.proto",
}

func init() { proto.RegisterFile("priceManager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x54, 0xed, 0x6a, 0xd4, 0x40,
	0x14, 0x35, 0xed, 0x7e, 0x74, 0x6f, 0xab, 0xc8, 0xad, 0xca, 0xb8, 0x45, 0x48, 0xf3, 0xc3, 0x06,
	0x7f, 0xac, 0xd0, 0x3e, 0x81, 0xf8, 0x45, 0x51, 0x4b, 0x89, 0xf8, 0xbb, 0x8c, 0x93, 0xbb, 0xeb,
	0x60, 0x32, 0x13, 0xe7, 0x4e, 0x84, 0x7d, 0x19, 0x9f, 0xc0, 0x87, 0x94, 0x4e, 0x12, 0x35, 0x34,
	0x18, 0x10, 0xfd, 0x37, 0xe7, 0xe4, 0xce, 0x39, 0x33, 0xe7, 0x0c, 0x01, 0xac, 0x9c, 0x56, 0xf4,
	0x4e, 0x1a, 0xb9, 0x21, 0xb7, 0xaa, 0x9c, 0xf5, 0x16, 0x7b, 0xdc, 0xf3, 0x42, 0x93, 0xf1, 0xc9,
	0xf7, 0x08, 0xa6, 0x2f, 0x8d, 0x77, 0x5b, 0x7c, 0x04, 0x50, 0x39, 0x9b, 0xd7, 0xca, 0x5f, 0xe9,
	0x5c, 0x44, 0x71, 0x94, 0x4e, 0xb3, 0x45, 0xcb, 0x9c, 0xe7, 0x28, 0x60, 0xfe, 0x95, 0x1c, 0x6b,
	0x6b, 0xc4, 0x4e, 0x1c, 0xa5, 0x8b, 0xac, 0x83, 0x78, 0x0c, 0x07, 0xdd, 0x46, 0x23, 0x4b, 0x12,
	0xbb, 0xe1, 0xf3, 0x7e, 0xcb, 0x5d, 0xc8, 0x92, 0x10, 0x61, 0xa2, 0x2c, 0x7b, 0x31, 0x09, 0xaa,
	0x61, 0x8d, 0x0f, 0x60, 0xc6, 0x5e, 0xfa, 0x9a, 0xc5, 0x34, 0x6c, 0x68, 0x11, 0x1e, 0xc1, 0x42,
	0xf3, 0x55, 0x21, 0x3d, 0xb1, 0x17, 0xb3, 0x38, 0x4a, 0xf7, 0xb2, 0x3d, 0xcd, 0x6f, 0x03, 0x4e,
	0xee, 0xc3, 0xe1, 0x2b, 0xf2, 0xea, 0x53, 0x46, 0xca, 0xba, 0x9c, 0x33, 0xfa, 0x52, 0x5f, 0xd3,
	0x6f, 0xe0, 0x5e, 0x9f, 0xe6, 0xca, 0x1a, 0x26, 0x3c, 0x83, 0x39, 0x19, 0xef, 0x34, 0xb1, 0x88,
	0xe2, 0xdd, 0x74, 0xff, 0xf4, 0xe1, 0xea, 0x66, 0x06, 0xab, 0x70, 0xff, 0xac, 0x9b, 0x4c, 0x5e,
	0xc0, 0xed, 0x0b, 0xeb, 0xf5, 0x7a, 0xdb, 0xaa, 0xff, 0x9d, 0xca, 0x13, 0xb8, 0xd3, 0xa9, 0xb4,
	0x87, 0x11, 0x30, 0x2f, 0x89, 0x59, 0x6e, 0x28, 0xa4, 0xbb, 0xc8, 0x3a, 0x98, 0xbc, 0x06, 0xfc,
	0x50, 0xe5, 0xd2, 0x53, 0xa3, 0xd1, 0xda, 0x8e, 0x14, 0xd2, 0x65, 0xba, 0xf3, 0x2b, 0xd3, 0xe4,
	0x29, 0x1c, 0xf6, 0x84, 0xc6, 0x9c, 0x4f, 0xbf, 0x4d, 0xe0, 0xe0, 0xf2, 0xb7, 0xbb, 0xa0, 0x06,
	0x0c, 0xb8, 0x91, 0x69, 0xf3, 0xc4, 0x93, 0xa1, 0x0b, 0x0f, 0x14, 0xb1, 0x4c, 0xc7, 0x07, 0x9b,
	0x33, 0x25, 0xb7, 0x70, 0x03, 0x77, 0x9f, 0x15, 0x45, 0x53, 0xec, 0x7f, 0x35, 0x52, 0x20, 0x9a,
	0x2a, 0xde, 0xd7, 0x4a, 0x11, 0xf3, 0xba, 0x2e, 0x8a, 0xed, 0xa5, 0x56, 0x9f, 0x29, 0xc7, 0xe3,
	0x21, 0x9d, 0x5e, 0xfd, 0xcb, 0xe4, 0x4f, 0x23, 0x3f, 0x4d, 0xd6, 0x70, 0x34, 0x60, 0xe2, 0xec,
	0xf5, 0xfa, 0x5f, 0xfa, 0x94, 0x20, 0xce, 0x0d, 0x93, 0xf3, 0xbd, 0x9a, 0x9a, 0x17, 0xf3, 0x78,
	0x48, 0xe1, 0xe6, 0xcb, 0x5a, 0x9e, 0x8c, 0xce, 0x75, 0x76, 0x1f, 0x67, 0xe1, 0xd7, 0x71, 0xf6,
	0x23, 0x00, 0x00, 0xff, 0xff, 0x87, 0x8b, 0xb7, 0x35, 0x50, 0x04, 0x00, 0x00,
}
